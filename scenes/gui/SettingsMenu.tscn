[gd_scene load_steps=25 format=2]

[ext_resource path="res://scripts/gui/Settings/SettingsMenu.gd" type="Script" id=1]
[ext_resource path="res://art/gui/theme/fonts/MenuPanelSubtitle.tres" type="DynamicFont" id=2]
[ext_resource path="res://art/gui/theme/game_theme.tres" type="Theme" id=3]
[ext_resource path="res://scripts/gui/SelfFocusingButton.gd" type="Script" id=4]
[ext_resource path="res://assets/textures/triangle_button/hovered.png" type="Texture" id=5]
[ext_resource path="res://scenes/gui/ColorPalette.tscn" type="PackedScene" id=6]
[ext_resource path="res://assets/textures/triangle_button/pressed.png" type="Texture" id=7]
[ext_resource path="res://assets/textures/triangle_button/disabled.png" type="Texture" id=8]
[ext_resource path="res://assets/textures/triangle_button/normal.png" type="Texture" id=9]
[ext_resource path="res://assets/textures/triangle_button/click_mask.png" type="BitMap" id=10]

[sub_resource type="GDScript" id=1]
script/source = "extends HBoxContainer


###### Variables ######

# The saved palette on file
var saved_palette : int
# The currently selected palette
var selected_palette : int


###### Functions ######

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	saved_palette = 0
	selected_palette = 0

# Returns the currently selected palette
func get_selected() -> int:
	return selected_palette

# Sets the selected pallete variable
func _set_selected(pal_n : int) -> void:
	selected_palette = pal_n

# Sets the saved palette variable
func _set_saved(pal_n : int) -> void:
	saved_palette = pal_n

# Sets the selected and saved palettes when loading from file,
# and propagates their values to the palette selector
func load_palettes(palette_n : int, omit_signal := false) -> void:
	_set_selected(palette_n)
	_set_saved(palette_n)
	$Palettes.set_palette(palette_n, omit_signal)
"

[sub_resource type="GDScript" id=2]
script/source = "extends HBoxContainer


###### Signals ######

# Sent when the selected palette is changed
signal selected_change(pal_n)


###### Variables ######

# The currently selected palette
var selected_palette : int
# The total amount of palettes
var total_palettes : int
# The node containing all the palette nodes
var _palette_container : HBoxContainer
# The node that graphically switches palette nodes
var _scroller : ScrollContainer
# The amount _scroller has to move when changing between adjacent palettes
var displacement_amount : float
# The hidden _scrollbar in _scroller
var _scrollbar : HScrollBar
# The previous value of _scrollbar maximum value
var _scroll_prev_max : float

###### Functions ######

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	selected_palette = 0
	total_palettes = $ScrollContainer/Palettes.get_child_count()
	_scroller = $ScrollContainer
	_palette_container = $ScrollContainer/Palettes
	_scrollbar = _scroller.get_h_scrollbar()
	displacement_amount = _scroller.get_size()[0]
	_scroll_prev_max = _scrollbar.get_max()
	_scrollbar.connect(\"changed\", self, \"_check_change\")

# Checks if the max_value of _scrollbar has changed,
# and if it has, updates the displacements
func _check_change() -> void:
	# As this is to compare when to resize pixels, 
	# there's no need for more precision
	var epsilon := 0.1
	var new_val := _scrollbar.get_max()
	# If there is a relevant change, update the displacements
	if abs(_scroll_prev_max - new_val) > epsilon:
		_update_displacement()
	# Save the new value
	_scroll_prev_max = new_val

# Updates the displacement amount and palette sizes
func _update_displacement() -> void:
	# Get the current size of _scroller
	displacement_amount = _scroller.get_size()[0]
	# Update the minimum size of _palette_container
	_palette_container.set_custom_minimum_size(
		Vector2(displacement_amount * total_palettes, 0
		))
	# Update the size of _palette_container,
	# setting the update on the size of the palettes
	_palette_container.set_size(
		Vector2(displacement_amount * total_palettes, 
		_scroller.get_size()[1]
		))
	# Fix any displacement errors caused in the resizing
	set_palette(selected_palette, true)

# Sets the given palette as the selected palette, and omit
# the signal when is not needed
func set_palette(palette_n : int, omit_signal := false) -> void:
	# Update the current palette
	selected_palette = palette_n
	# Set _scroller to show the selected palette
	_scroller.set_h_scroll(palette_n * displacement_amount)
	# Send signal when appropiate
	if !omit_signal:
		emit_signal(\"selected_change\", palette_n)

# Sets the next palette as the selected palette,
# handling them as in a circular array
func next_palette() -> void:
	set_palette((selected_palette + 1) % total_palettes)

# Sets the previous palette as the selected palette
# handling them as in a circular array
func previous_palette() -> void:
	set_palette(posmod((selected_palette - 1), total_palettes))
"

[sub_resource type="StyleBoxEmpty" id=3]

[sub_resource type="StyleBoxEmpty" id=4]

[sub_resource type="StyleBoxEmpty" id=5]

[sub_resource type="StyleBoxEmpty" id=6]

[sub_resource type="StyleBoxEmpty" id=7]

[sub_resource type="Theme" id=8]
HScrollBar/icons/decrement = null
HScrollBar/icons/decrement_highlight = null
HScrollBar/icons/increment = null
HScrollBar/icons/increment_highlight = null
HScrollBar/styles/grabber = SubResource( 3 )
HScrollBar/styles/grabber_highlight = SubResource( 4 )
HScrollBar/styles/grabber_pressed = SubResource( 5 )
HScrollBar/styles/scroll = SubResource( 6 )
HScrollBar/styles/scroll_focus = SubResource( 7 )

[sub_resource type="GDScript" id=9]
script/source = "extends HBoxContainer


###### Signals ######

# Thrown when the mute button is toggled, on is true when the sound is enabled
signal sound_changed(on)


###### Variables ######

# State of the mute toggle button
var muted : bool
# State of the mute setting on file
var saved_mute : bool
# Signal bypass, to avoid sending signals when loading
var stop_signal : bool


###### Functions ######

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	muted = false
	saved_mute = false
	stop_signal = false
	$Toggle.connect(\"toggled\", self, \"toggle_muted\")

# Returns true when the mute button is pressed
func get_muted() -> bool:
	return muted

# Restores the mute state to the setting saved in file
func restore_saved() -> void:
	# Toggle the state only if is different
	if muted != saved_mute:
		$Toggle.pressed = saved_mute

# Loads the saved mute setting and propagates it to the mute button
func load_muted(saved_setting : bool, omit_signal := false) -> void:
	saved_mute = saved_setting
	# Don't signal audio nodes when loading the setting
	stop_signal = omit_signal
	# Toggle the button if saved_mute is different from default
	if (saved_mute):
		$Toggle.pressed = true
	stop_signal = false

# Toggles the current mute setting state and signals the change
func toggle_muted(_button_pressed := false) -> void:
	# Toggle the setting
	muted = !muted
	# Send the signal if the node is not loading from file
	if !stop_signal:
		emit_signal(\"sound_changed\", !muted)
"

[sub_resource type="StyleBoxEmpty" id=10]

[sub_resource type="StyleBoxEmpty" id=11]

[sub_resource type="StyleBoxEmpty" id=12]

[sub_resource type="StyleBoxEmpty" id=13]

[sub_resource type="StyleBoxEmpty" id=14]

[node name="SettingsMenu" type="VBoxContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 1000, 600 )
size_flags_horizontal = 3
size_flags_vertical = 3
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}
backText = "Back to Menu"

[node name="Title" type="Label" parent="."]
margin_right = 1280.0
margin_bottom = 72.0
rect_min_size = Vector2( 800, 72 )
custom_fonts/font = ExtResource( 2 )
text = "Settings"
align = 1
valign = 1
uppercase = true

[node name="Config" type="VBoxContainer" parent="."]
margin_top = 80.0
margin_right = 1280.0
margin_bottom = 264.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Color Palettes" type="HBoxContainer" parent="Config"]
margin_right = 1280.0
margin_bottom = 96.0
rect_min_size = Vector2( 0, 40 )
size_flags_vertical = 3
size_flags_stretch_ratio = 2.0
script = SubResource( 1 )

[node name="Label" type="Label" parent="Config/Color Palettes"]
margin_top = 32.0
margin_right = 424.0
margin_bottom = 63.0
size_flags_horizontal = 3
custom_fonts/font = ExtResource( 2 )
text = "Color palette"

[node name="Palettes" type="HBoxContainer" parent="Config/Color Palettes"]
margin_left = 432.0
margin_right = 1280.0
margin_bottom = 96.0
size_flags_horizontal = 3
size_flags_stretch_ratio = 2.0
alignment = 1
script = SubResource( 2 )

[node name="PrevPalette" type="TextureButton" parent="Config/Color Palettes/Palettes"]
margin_right = 30.0
margin_bottom = 96.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 30, 61 )
size_flags_horizontal = 5
size_flags_vertical = 5
texture_normal = ExtResource( 9 )
texture_pressed = ExtResource( 7 )
texture_hover = ExtResource( 5 )
texture_disabled = ExtResource( 8 )
texture_focused = ExtResource( 9 )
texture_click_mask = ExtResource( 10 )
expand = true
stretch_mode = 5

[node name="ScrollContainer" type="ScrollContainer" parent="Config/Color Palettes/Palettes"]
margin_left = 38.0
margin_right = 810.0
margin_bottom = 96.0
rect_min_size = Vector2( 600, 0 )
size_flags_horizontal = 3
size_flags_vertical = 3
theme = SubResource( 8 )
follow_focus = true
scroll_vertical_enabled = false

[node name="Palettes" type="HBoxContainer" parent="Config/Color Palettes/Palettes/ScrollContainer"]
margin_right = 3860.0
margin_bottom = 96.0
rect_min_size = Vector2( 3860, 0 )
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/separation = 0
alignment = 1

[node name="StandardPallete" parent="Config/Color Palettes/Palettes/ScrollContainer/Palettes" instance=ExtResource( 6 )]
rect_min_size = Vector2( 600, 0 )

[node name="Black and White" parent="Config/Color Palettes/Palettes/ScrollContainer/Palettes" instance=ExtResource( 6 )]
margin_left = 772.0
margin_right = 1544.0
rect_min_size = Vector2( 600, 0 )
RelaxedColor = Color( 0, 0, 0, 1 )
HypedColor = Color( 1, 1, 1, 1 )

[node name="Protanopia" parent="Config/Color Palettes/Palettes/ScrollContainer/Palettes" instance=ExtResource( 6 )]
margin_left = 1544.0
margin_right = 2316.0
rect_min_size = Vector2( 600, 0 )
RelaxedColor = Color( 0, 0.356863, 1, 1 )
HypedColor = Color( 1, 0.67451, 0.0431373, 1 )

[node name="Deuteranopia" parent="Config/Color Palettes/Palettes/ScrollContainer/Palettes" instance=ExtResource( 6 )]
margin_left = 2316.0
margin_right = 3088.0
rect_min_size = Vector2( 600, 0 )
RelaxedColor = Color( 0, 0.623529, 1, 1 )
HypedColor = Color( 1, 0.623529, 0, 1 )

[node name="Tritanopia" parent="Config/Color Palettes/Palettes/ScrollContainer/Palettes" instance=ExtResource( 6 )]
margin_left = 3088.0
margin_right = 3860.0
rect_min_size = Vector2( 600, 0 )
RelaxedColor = Color( 0.431373, 0, 1, 1 )

[node name="RotWrapper" type="Control" parent="Config/Color Palettes/Palettes"]
margin_left = 818.0
margin_right = 848.0
margin_bottom = 96.0
rect_min_size = Vector2( 30, 96 )

[node name="NextPalette" type="TextureButton" parent="Config/Color Palettes/Palettes/RotWrapper"]
margin_left = -2.0
margin_top = -24.0
margin_right = 28.0
margin_bottom = 76.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 30, 61 )
rect_rotation = 180.0
rect_pivot_offset = Vector2( 15, 61 )
texture_normal = ExtResource( 9 )
texture_pressed = ExtResource( 7 )
texture_hover = ExtResource( 5 )
texture_disabled = ExtResource( 8 )
texture_focused = ExtResource( 9 )
texture_click_mask = ExtResource( 10 )
expand = true
stretch_mode = 5
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Mute" type="HBoxContainer" parent="Config"]
margin_top = 104.0
margin_right = 1280.0
margin_bottom = 184.0
rect_min_size = Vector2( 0, 40 )
size_flags_vertical = 3
script = SubResource( 9 )

[node name="Label" type="Label" parent="Config/Mute"]
margin_top = 24.0
margin_right = 1120.0
margin_bottom = 55.0
size_flags_horizontal = 3
custom_fonts/font = ExtResource( 2 )
text = "Mute"

[node name="Toggle" type="CheckButton" parent="Config/Mute"]
margin_left = 1128.0
margin_right = 1280.0
margin_bottom = 80.0
size_flags_vertical = 3
size_flags_stretch_ratio = 2.0
custom_styles/hover = SubResource( 10 )
custom_styles/pressed = SubResource( 11 )
custom_styles/focus = SubResource( 12 )
custom_styles/hover_pressed = SubResource( 13 )
align = 2

[node name="HSeparator" type="HSeparator" parent="."]
margin_top = 272.0
margin_right = 1280.0
margin_bottom = 640.0
size_flags_vertical = 3
size_flags_stretch_ratio = 2.0
custom_styles/separator = SubResource( 14 )

[node name="Back" type="HBoxContainer" parent="."]
margin_top = 648.0
margin_right = 1280.0
margin_bottom = 720.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 800, 72 )

[node name="BackContainer" type="CenterContainer" parent="Back"]
margin_right = 636.0
margin_bottom = 72.0
size_flags_horizontal = 3

[node name="BackButton" type="Button" parent="Back/BackContainer"]
margin_left = 268.0
margin_top = 21.0
margin_right = 368.0
margin_bottom = 51.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 100, 30 )
size_flags_horizontal = 3
theme = ExtResource( 3 )
text = "Back to"
script = ExtResource( 4 )

[node name="SaveContainer" type="CenterContainer" parent="Back"]
margin_left = 644.0
margin_right = 1280.0
margin_bottom = 72.0
size_flags_horizontal = 3

[node name="SaveButton" type="Button" parent="Back/SaveContainer"]
margin_left = 247.0
margin_top = 21.0
margin_right = 388.0
margin_bottom = 51.0
grow_horizontal = 2
grow_vertical = 2
rect_min_size = Vector2( 100, 30 )
size_flags_horizontal = 3
theme = ExtResource( 3 )
text = "  Save Changes  "
script = ExtResource( 4 )
[connection signal="selected_change" from="Config/Color Palettes/Palettes" to="Config/Color Palettes" method="_set_selected"]
[connection signal="pressed" from="Config/Color Palettes/Palettes/PrevPalette" to="Config/Color Palettes/Palettes" method="previous_palette"]
[connection signal="pressed" from="Config/Color Palettes/Palettes/RotWrapper/NextPalette" to="Config/Color Palettes/Palettes" method="next_palette"]
[connection signal="sound_changed" from="Config/Mute" to="." method="propagate_sound_change"]
[connection signal="hovered" from="Back/BackContainer/BackButton" to="." method="_request_focus"]
[connection signal="pressed" from="Back/BackContainer/BackButton" to="." method="_exit_menu"]
[connection signal="hovered" from="Back/SaveContainer/SaveButton" to="." method="_request_focus"]
[connection signal="pressed" from="Back/SaveContainer/SaveButton" to="." method="_save_changes"]
